<?php

namespace AppBundle\Repository;

/**
 * UserFollowRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserFollowRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get number of followers for a user
     *
     * @param int $userId
     * @return array
     */
    public function getTotalFollowers($userId)
    {
        $query = $this->createQueryBuilder('h')
            ->select('COUNT(h.userFollowed) AS total_followers')
            ->where('h.userFollowed = :userId')
            ->setParameter(':userId', $userId)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * Get and order in a descending order popular users.
     *
     * @param int $maxResults
     * @return array
     */
    public function getPopularsProfiles($maxResults)
    {
        $date = new \DateTime();
        $date->modify('-7 days');

        $query = $this->createQueryBuilder('h')
            ->where('h.followedDate > :date')
            ->setParameter(':date', $date)
            ->join('h.userFollowed', 'f')
            ->select('COUNT(h.userFollowed) AS total_follows', 'f.username', 'f.image', 'f.userId')
            ->groupBy('h.userFollowed')
            ->orderBy('total_follows','DESC')
            ->getQuery();

        if ($maxResults != 0) {
            $query->setMaxResults($maxResults);
        }

        return $query->getResult();
    }

    /**
     * Check if an user follow another user.
     *
     * @param int $followerId
     * @param int $followedId
     * @return array
     */
    public function checkIfFollowed($followerId, $followedId)
    {
        $query = $this->createQueryBuilder('h')
            ->where('h.userFollowed = :followedId')
            ->andWhere('h.follower = :followerId')
            ->setParameter(':followedId', $followedId)
            ->setParameter(':followerId', $followerId)
            ->getQuery()
            ->getResult();

        if (count($query) == 1) {
            return true;
        }
        else {
            return false;
        }
    }
}

